generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  password     String
  username     String         @unique
  role         String
  createdAt    DateTime       @default(now())
  lastLogin    DateTime?
  admin        Admin?
  notification Notification[]
  patient      Patient?
  sessions     Session[]
  supervisor   Supervisor?
  therapist    Therapist?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Therapist {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  specialization  String
  yearsExperience Int
  patients        Patient[]
  user            User             @relation(fields: [userId], references: [id])
  therapyPlans    TherapyPlan[]
  therapySessions TherapySession[]
}

model Supervisor {
  id         Int              @id @default(autoincrement())
  userId     Int              @unique
  department String
  ratings    ClinicalRating[]
  user       User             @relation(fields: [userId], references: [id])
}

model Patient {
  id                Int              @id @default(autoincrement())
  userId            Int              @unique
  dateOfBirth       DateTime
  diagnosis         String
  therapistId       Int?
  assignedTherapist Therapist?       @relation(fields: [therapistId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  progressReports   ProgressReport[]
  therapyPlans      TherapyPlan[]
  therapySessions   TherapySession[]
}

model Admin {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  department  String
  accessLevel String
  user        User   @relation(fields: [userId], references: [id])
}

model TherapyPlan {
  id              Int              @id @default(autoincrement())
  patientId       Int
  therapistId     Int
  goals           String
  activities      String
  startDate       DateTime
  endDate         DateTime
  status          String
  ratings         ClinicalRating[]
  patient         Patient          @relation(fields: [patientId], references: [id])
  therapist       Therapist        @relation(fields: [therapistId], references: [id])
  therapySessions TherapySession[]
}

model TherapySession {
  id           Int           @id @default(autoincrement())
  planId       Int
  therapistId  Int
  patientId    Int
  sessionDate  DateTime
  duration     Int
  status       String
  progressNote ProgressNote?
  patient      Patient       @relation(fields: [patientId], references: [id])
  therapyPlan  TherapyPlan   @relation(fields: [planId], references: [id])
  therapist    Therapist     @relation(fields: [therapistId], references: [id])
}

model ProgressNote {
  id               Int            @id @default(autoincrement())
  therapySessionId Int            @unique
  observations     String
  recommendations  String
  therapySession   TherapySession @relation(fields: [therapySessionId], references: [id])
}

model ProgressReport {
  id              Int      @id @default(autoincrement())
  patientId       Int
  reportDate      DateTime
  summary         String
  overallProgress String
  patient         Patient  @relation(fields: [patientId], references: [id])
}

model ClinicalRating {
  id            Int         @id @default(autoincrement())
  supervisorId  Int
  therapyPlanId Int
  ratingScore   Int
  feedback      String
  ratingDate    DateTime
  supervisor    Supervisor  @relation(fields: [supervisorId], references: [id])
  therapyPlan   TherapyPlan @relation(fields: [therapyPlanId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
