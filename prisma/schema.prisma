// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  username      String    @unique
  role          String
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?
  therapist     Therapist?
  supervisor    Supervisor?
  patient       Patient?
  admin         Admin?
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Therapist {
  id               Int              @id @default(autoincrement())
  user             User             @relation(fields: [userId], references: [id])
  userId           Int              @unique
  specialization   String
  yearsExperience  Int
  therapyPlans     TherapyPlan[]
  therapySessions  TherapySession[]
  patients         Patient[]
}

model Supervisor {
  id           Int             @id @default(autoincrement())
  user         User            @relation(fields: [userId], references: [id])
  userId       Int             @unique
  department   String
  ratings      ClinicalRating[]
}

model Patient {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  userId             Int              @unique
  dateOfBirth        DateTime
  diagnosis          String
  assignedTherapist  Therapist        @relation(fields: [therapistId], references: [id])
  therapistId        Int
  therapyPlans       TherapyPlan[]
  therapySessions    TherapySession[]
  progressReports    ProgressReport[]
}

model Admin {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int    @unique
  department   String
  accessLevel  String
}

model TherapyPlan {
  id           Int              @id @default(autoincrement())
  patient      Patient          @relation(fields: [patientId], references: [id])
  patientId    Int
  therapist    Therapist        @relation(fields: [therapistId], references: [id])
  therapistId  Int
  goals        String
  activities   String
  startDate    DateTime
  endDate      DateTime
  status       String
  therapySessions TherapySession[]
  ratings      ClinicalRating[]
}

model TherapySession {
  id           Int            @id @default(autoincrement())
  therapyPlan  TherapyPlan    @relation(fields: [planId], references: [id])
  planId       Int
  therapist    Therapist      @relation(fields: [therapistId], references: [id])
  therapistId  Int
  patient      Patient        @relation(fields: [patientId], references: [id])
  patientId    Int
  sessionDate  DateTime
  duration     Int
  status       String
  progressNote ProgressNote?
}

model ProgressNote {
  id                Int            @id @default(autoincrement())
  therapySession    TherapySession @relation(fields: [therapySessionId], references: [id])
  therapySessionId  Int            @unique
  observations      String
  recommendations   String
}

model ProgressReport {
  id              Int      @id @default(autoincrement())
  patient         Patient  @relation(fields: [patientId], references: [id])
  patientId       Int
  reportDate      DateTime
  summary         String
  overallProgress String
}

model ClinicalRating {
  id            Int        @id @default(autoincrement())
  supervisor    Supervisor @relation(fields: [supervisorId], references: [id])
  supervisorId  Int
  therapyPlan   TherapyPlan @relation(fields: [therapyPlanId], references: [id])
  therapyPlanId Int
  ratingScore   Int
  feedback      String
  ratingDate    DateTime
}